{"version":3,"file":"serial.c58f9fd1.js","sources":["../../packages/serial/serial.mjs"],"sourcesContent":["/*\nserial.mjs - <short description TODO>\nCopyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/serial/serial.mjs>\nThis program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport { Pattern, isPattern } from '@strudel.cycles/core';\n\nvar serialWriter;\nvar choosing = false;\n\nexport async function getWriter(br=38400) {\n  if (choosing) {\n    return;\n  }\n  choosing = true;\n  if (serialWriter) {\n    return serialWriter;\n  }\n  if ('serial' in navigator) {\n    const port = await navigator.serial.requestPort();\n    await port.open({ baudRate: br });\n    const textEncoder = new TextEncoderStream();\n    const writableStreamClosed = textEncoder.readable.pipeTo(port.writable);\n    const writer = textEncoder.writable.getWriter();\n    serialWriter = function (message) {\n      writer.write(message)\n    }\n  }\n  else {\n    throw('Webserial is not available in this browser.')\n  }\n}\n\nconst latency = 0.1;\n\nPattern.prototype.serial = function (...args) {\n  return this._withHap((hap) => {\n    if (!serialWriter) {\n      getWriter(...args);\n    }\n    const onTrigger = (time, hap, currentTime) => {\n      var message = \"\";\n      if (typeof hap.value === 'object') {\n        if ('action' in hap.value) {\n          message += hap.value['action'] + '(';\n          var first = true;\n          for (const [key, val] of Object.entries(hap.value)) {\n            if (key === 'action') {\n              continue;\n            }\n            if (first) {\n              first = false;\n            }\n            else {\n              message +=',';\n            }\n            message += `${key}:${val}`\n          }\n          message += ')';\n        }\n        else {\n          for (const [key, val] of Object.entries(hap.value)) {\n            message += `${key}:${val};`\n          }\n        }\n      }\n      else {\n        message = hap.value;\n      }\n      const offset = (time - currentTime + latency) * 1000;\n      window.setTimeout(serialWriter, offset, message);\n    };\n    return hap.setContext({ ...hap.context, onTrigger });\n  });\n};\n"],"names":[],"mappings":"qdAQA,GAAI,GACA,EAAW,GAER,iBAAyB,EAAG,MAAO,CACxC,GAAI,GAIJ,IADA,EAAW,GACP,EACF,MAAO,GAET,GAAI,UAAY,WAAW,CACzB,KAAM,GAAO,KAAM,WAAU,OAAO,YAAW,EAC/C,KAAM,GAAK,KAAK,CAAE,SAAU,CAAI,CAAA,EAChC,KAAM,GAAc,GAAI,mBACK,EAAY,SAAS,OAAO,EAAK,QAAQ,EACtE,KAAM,GAAS,EAAY,SAAS,UAAS,EAC7C,EAAe,SAAU,EAAS,CAChC,EAAO,MAAM,CAAO,CACrB,CACF,KAEC,MAAM,8CAEV,CAEA,KAAM,GAAU,GAEhB,EAAQ,UAAU,OAAS,YAAa,EAAM,CAC5C,MAAO,MAAK,SAAS,AAAC,GAAQ,CAC5B,AAAK,GACH,EAAU,GAAG,CAAI,EAEnB,KAAM,GAAY,CAAC,EAAM,EAAK,IAAgB,CAC5C,GAAI,GAAU,GACd,GAAI,MAAO,GAAI,OAAU,SACvB,GAAI,UAAY,GAAI,MAAO,CACzB,GAAW,EAAI,MAAM,OAAY,IACjC,GAAI,GAAQ,GACZ,SAAW,CAAC,EAAK,IAAQ,QAAO,QAAQ,EAAI,KAAK,EAC/C,AAAI,IAAQ,UAGZ,CAAI,EACF,EAAQ,GAGR,GAAU,IAEZ,GAAW,GAAG,KAAO,KAEvB,GAAW,GACZ,KAEC,UAAW,CAAC,EAAK,IAAQ,QAAO,QAAQ,EAAI,KAAK,EAC/C,GAAW,GAAG,KAAO,SAKzB,GAAU,EAAI,MAEhB,KAAM,GAAU,GAAO,EAAc,GAAW,IAChD,OAAO,WAAW,EAAc,EAAQ,CAAO,CACrD,EACI,MAAO,GAAI,WAAW,OAAK,EAAI,SAAT,CAAkB,WAAS,EAAE,CACvD,CAAG,CACH"}